{"ast":null,"code":"import LineChart from '../line-chart/line-chart';\nimport SplineSegment from '../line-chart/spline-segment';\nimport LineSegment from '../line-chart/line-segment';\nimport { Point, Box } from '../../core';\nimport { SMOOTH, INTERPOLATE } from '../constants';\nimport { setDefaultOptions, last } from '../../common';\n\nfunction groupBySeriesIx(segments) {\n  var seriesSegments = [];\n\n  for (var idx = 0; idx < segments.length; idx++) {\n    var segment = segments[idx];\n    seriesSegments[segment.seriesIx] = seriesSegments[segment.seriesIx] || [];\n    seriesSegments[segment.seriesIx].push(segment);\n  }\n\n  return seriesSegments;\n}\n\nvar RadarLineChart = function (LineChart) {\n  function RadarLineChart() {\n    LineChart.apply(this, arguments);\n  }\n\n  if (LineChart) RadarLineChart.__proto__ = LineChart;\n  RadarLineChart.prototype = Object.create(LineChart && LineChart.prototype);\n  RadarLineChart.prototype.constructor = RadarLineChart;\n\n  RadarLineChart.prototype.pointSlot = function pointSlot(categorySlot, valueSlot) {\n    var valueRadius = categorySlot.center.y - valueSlot.y1;\n    var slot = Point.onCircle(categorySlot.center, categorySlot.middle(), valueRadius);\n    return new Box(slot.x, slot.y, slot.x, slot.y);\n  };\n\n  RadarLineChart.prototype.renderSegments = function renderSegments() {\n    LineChart.prototype.renderSegments.call(this);\n\n    if (this._segments && this._segments.length > 1) {\n      var seriesSegments = groupBySeriesIx(this._segments);\n\n      for (var idx = 0; idx < seriesSegments.length; idx++) {\n        var segments = seriesSegments[idx];\n\n        if (segments && segments.length > 1) {\n          var firstPoint = segments[0].linePoints[0];\n          var lastSegment = last(segments);\n          var lastPoint = last(lastSegment.linePoints);\n          var isFirstDataPoint = firstPoint.categoryIx === 0;\n          var isLastDataPoint = lastPoint.categoryIx === lastPoint.categoriesCount - 1;\n\n          if (isFirstDataPoint && isLastDataPoint) {\n            last(segments).linePoints.push(firstPoint);\n          }\n        }\n      }\n    }\n  };\n\n  RadarLineChart.prototype.createSegment = function createSegment(linePoints, currentSeries, seriesIx) {\n    var style = currentSeries.style;\n    var pointType;\n\n    if (style === SMOOTH) {\n      pointType = SplineSegment;\n    } else {\n      pointType = LineSegment;\n    }\n\n    var segment = new pointType(linePoints, currentSeries, seriesIx);\n    var missingValues = this.seriesMissingValues(currentSeries);\n\n    if (linePoints.length === currentSeries.data.length || missingValues === INTERPOLATE) {\n      segment.options.closed = true;\n    }\n\n    return segment;\n  };\n\n  return RadarLineChart;\n}(LineChart);\n\nsetDefaultOptions(RadarLineChart, {\n  clip: false,\n  limitPoints: false\n});\nexport default RadarLineChart;","map":null,"metadata":{},"sourceType":"module"}