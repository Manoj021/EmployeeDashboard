{"ast":null,"code":"import _objectSpread from \"D:\\\\ReactApplications\\\\emp-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\ReactApplications\\\\emp-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\ReactApplications\\\\emp-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\ReactApplications\\\\emp-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\ReactApplications\\\\emp-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\ReactApplications\\\\emp-dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar _jsxFileName = \"D:\\\\ReactApplications\\\\emp-dashboard\\\\src\\\\Components\\\\Charts\\\\LineChart.js\",\n    _this2 = this;\n\nimport React, { Component } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"./LineChart.css\";\nimport color from \"rcolor\";\nvar initialState = {\n  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"],\n  datasets: [{\n    label: \"Work time in hours\",\n    backgroundColor: \"rgba(25,99,132,0.2)\",\n    borderColor: \"rgba(255,99,132,1)\",\n    borderWidth: 1,\n    hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n    hoverBorderColor: \"rgba(255,99,132,1)\",\n    data: [65, 59, 80, 81, 56, 55, 80, 50]\n  }]\n};\n\nvar Graph = /*#__PURE__*/function (_Component) {\n  _inherits(Graph, _Component);\n\n  function Graph() {\n    _classCallCheck(this, Graph);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Graph).apply(this, arguments));\n  }\n\n  _createClass(Graph, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState(initialState);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      setInterval(function () {\n        var oldDataSet = _this.state.datasets[0];\n        var newData = [];\n\n        for (var x = 0; x < _this.state.labels.length; x++) {\n          newData.push(Math.floor(Math.random() * 51) + 50);\n        }\n\n        var newDataSet = _objectSpread({}, oldDataSet);\n\n        newDataSet.data = newData;\n        newDataSet.backgroundColor = color();\n        newDataSet.borderColor = color();\n        newDataSet.hoverBackgroundColor = color();\n        newDataSet.hoverBorderColor = color();\n\n        var newState = _objectSpread({}, initialState, {\n          datasets: [newDataSet]\n        });\n\n        _this.setState(newState);\n      }, 5000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Bar, {\n        data: this.state,\n        options: {\n          objectFit: \"contain\",\n          maintainAspectRatio: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Graph;\n}(Component);\n\nvar ChartContainer = function ChartContainer() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CContainer\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Graph, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChartContainer;","map":{"version":3,"sources":["D:/ReactApplications/emp-dashboard/src/Components/Charts/LineChart.js"],"names":["React","Component","Bar","color","initialState","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","Graph","setState","_this","setInterval","oldDataSet","state","newData","x","length","push","Math","floor","random","newDataSet","newState","objectFit","maintainAspectRatio","ChartContainer"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAO,iBAAP;AACA,OAAOC,KAAP,MAAkB,QAAlB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CACN,SADM,EAEN,UAFM,EAGN,OAHM,EAIN,OAJM,EAKN,KALM,EAMN,MANM,EAON,MAPM,EAQN,QARM,CADW;AAWnBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,oBADT;AAEEC,IAAAA,eAAe,EAAE,qBAFnB;AAGEC,IAAAA,WAAW,EAAE,oBAHf;AAIEC,IAAAA,WAAW,EAAE,CAJf;AAKEC,IAAAA,oBAAoB,EAAE,sBALxB;AAMEC,IAAAA,gBAAgB,EAAE,oBANpB;AAOEC,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B;AAPR,GADQ;AAXS,CAArB;;IAwBMC,K;;;;;;;;;;;yCACiB;AACnB,WAAKC,QAAL,CAAcX,YAAd;AACD;;;wCACmB;AAClB,UAAIY,KAAK,GAAG,IAAZ;;AAEAC,MAAAA,WAAW,CAAC,YAAY;AACtB,YAAIC,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAYb,QAAZ,CAAqB,CAArB,CAAjB;AACA,YAAIc,OAAO,GAAG,EAAd;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACG,KAAN,CAAYd,MAAZ,CAAmBiB,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClDD,UAAAA,OAAO,CAACG,IAAR,CAAaC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,EAA9C;AACD;;AAED,YAAIC,UAAU,qBACTT,UADS,CAAd;;AAIAS,QAAAA,UAAU,CAACd,IAAX,GAAkBO,OAAlB;AACAO,QAAAA,UAAU,CAACnB,eAAX,GAA6BL,KAAK,EAAlC;AACAwB,QAAAA,UAAU,CAAClB,WAAX,GAAyBN,KAAK,EAA9B;AACAwB,QAAAA,UAAU,CAAChB,oBAAX,GAAkCR,KAAK,EAAvC;AACAwB,QAAAA,UAAU,CAACf,gBAAX,GAA8BT,KAAK,EAAnC;;AAEA,YAAIyB,QAAQ,qBACPxB,YADO;AAEVE,UAAAA,QAAQ,EAAE,CAACqB,UAAD;AAFA,UAAZ;;AAKAX,QAAAA,KAAK,CAACD,QAAN,CAAea,QAAf;AACD,OAxBU,EAwBR,IAxBQ,CAAX;AAyBD;;;6BACQ;AACP,0BACE,oBAAC,GAAD;AACE,QAAA,IAAI,EAAE,KAAKT,KADb;AAEE,QAAA,OAAO,EAAE;AACPU,UAAAA,SAAS,EAAE,SADJ;AAEPC,UAAAA,mBAAmB,EAAE;AAFd,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;;;EA3CiB7B,S;;AA8CpB,IAAM8B,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;AAQA,eAAeA,cAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"./LineChart.css\";\nimport color from \"rcolor\";\n\nconst initialState = {\n  labels: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n  ],\n  datasets: [\n    {\n      label: \"Work time in hours\",\n      backgroundColor: \"rgba(25,99,132,0.2)\",\n      borderColor: \"rgba(255,99,132,1)\",\n      borderWidth: 1,\n      hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n      hoverBorderColor: \"rgba(255,99,132,1)\",\n      data: [65, 59, 80, 81, 56, 55, 80, 50],\n    },\n  ],\n};\n\nclass Graph extends Component {\n  componentWillMount() {\n    this.setState(initialState);\n  }\n  componentDidMount() {\n    var _this = this;\n\n    setInterval(function () {\n      var oldDataSet = _this.state.datasets[0];\n      var newData = [];\n\n      for (var x = 0; x < _this.state.labels.length; x++) {\n        newData.push(Math.floor(Math.random() * 51) + 50);\n      }\n\n      var newDataSet = {\n        ...oldDataSet,\n      };\n\n      newDataSet.data = newData;\n      newDataSet.backgroundColor = color();\n      newDataSet.borderColor = color();\n      newDataSet.hoverBackgroundColor = color();\n      newDataSet.hoverBorderColor = color();\n\n      var newState = {\n        ...initialState,\n        datasets: [newDataSet],\n      };\n\n      _this.setState(newState);\n    }, 5000);\n  }\n  render() {\n    return (\n      <Bar\n        data={this.state}\n        options={{\n          objectFit: \"contain\",\n          maintainAspectRatio: false,\n        }}\n      />\n    );\n  }\n}\n\nconst ChartContainer = () => {\n  return (\n    <div className=\"CContainer\">\n      <Graph />\n    </div>\n  );\n};\n\nexport default ChartContainer;\n"]},"metadata":{},"sourceType":"module"}