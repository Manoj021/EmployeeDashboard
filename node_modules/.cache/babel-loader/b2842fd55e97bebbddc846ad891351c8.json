{"ast":null,"code":"import { defined } from '../util';\n\nfunction geometryAccessor(name) {\n  var fieldName = \"_\" + name;\n  return function (value) {\n    if (defined(value)) {\n      this._observerField(fieldName, value);\n\n      this.geometryChange();\n      return this;\n    }\n\n    return this[fieldName];\n  };\n}\n\nfunction defineGeometryAccessors(fn, names) {\n  for (var i = 0; i < names.length; i++) {\n    fn[names[i]] = geometryAccessor(names[i]);\n  }\n}\n\nvar withGeometry = function withGeometry(TBase, names) {\n  if (names === void 0) names = [\"geometry\"];\n\n  var result = function (TBase) {\n    function result() {\n      TBase.apply(this, arguments);\n    }\n\n    if (TBase) result.__proto__ = TBase;\n    result.prototype = Object.create(TBase && TBase.prototype);\n    result.prototype.constructor = result;\n    return result;\n  }(TBase);\n\n  defineGeometryAccessors(result.prototype, names);\n  return result;\n};\n\nexport default withGeometry;","map":null,"metadata":{},"sourceType":"module"}